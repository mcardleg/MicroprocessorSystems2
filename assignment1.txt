; Write a complete Keil MDK project comprising a main program and a subroutine.
; The subroutine must be called “fact” and should calculate the factorial of the number passed to it in R0.
; Calculations  must be done in 64-bit unsigned arithmetic and the result must be returned in R0 & R1, with
; the most significant 32 bits in R0 and the least significant 32 bits in R1.#
; If any error occurs, the C bit of the CPSR must be set and a result of 0 returned in R0 & R1. 
; If there are no errors, the C bit must be clear.
; The main program should use the subroutine four times, to calculate 5!, 14!, 20!, 30!
; Each result should be stored, by the main program, as a 64-bit result in RAM, starting at 0x40000000.
; Do this by reserving four 8-byte spaces at the start of the read-write area.


	area	tcd,code,readonly
	export	__main
__main						
	stmfd sp!,{r0-r2,r6,r14}				;save registers
	mov		r0,#0
	mov		r1,#5
	mov		r6,#0				
	cmp		r6,#'0'
	b		fact
	ldr		r2,=ans1
	str		r0,[r2],#4
	str		r1,[r2],#4

	mov		r0,#0
	mov		r1,#14	
	cmp		r6,#'0'
	b		fact
	ldr		r2,=ans2
	str		r0,[r2],#4
	str		r1,[r2]

	mov		r0,#0
	mov		r1,#20			
	cmp		r6,#'0'
	b		fact
	ldr		r2,=ans3
	str		r0,[r2],#4
	str		r1,[r2]
	
	mov		r0,#0
	mov		r1,#30						
	cmp		r6,#'0'
	b		fact
	ldr		r2,=ans4
	str		r0,[r2],#4
	str		r1,[r2]

	ldmfd sp!,{r0-r2,r6,r14}				; restore registers

fin b fin



mult			; Input: r0 and r1 hold the result of (n-1)!, r2 holds n. Output: r0 and r1 hold answer
					
	stmfd sp!,{r3-r6,r14}				;save registers
	
	mov 	r5,#0						; initialize error check															
	umull	r3,r4,r0,r2					; MS32 multiply
	cmp		r4,#0						
	beq		if1							; if r4 is not zero, we have more than 64 bits in total, set r5
	mov		r5,#1						
if1
	mov		r6,#0						; unset carry
	cmp		r6,#'0'
	mov		r0, r3
	umull	r3,r4,r1,r2					; LS32 multiply
	cmp		r4,#0						
	beq		if2							; if r4 is not zero, add it to r0						
	cmp		r6,#'0'						; unset carry
	adds	r0,r4					
	bcc		if3							; if carry is set, we have more than 64 bits in total, set r5
	mov		r5,#1						
if3
if2
	mov		r1, r3
	cmp		r5,#1						; if r5 is set, set carry

	ldmfd sp!,{r3-r6,r14}				; restore registers
	bx lr

	
fact			; Input: r0 and r1 hold the result of (n-1)!, r2 holds n. Output: r0 and r1 hold answer
	
	stmfd sp!,{r2,r4,r5,r14}				; save registers
	
	mov		r4,#0
	cmp		r4,#'0'						; unset carry
	
	cmp		r1,#0
	beq		return1						; if (r1 is 0){ don't recurse and set r0=0 & r1=1}
	cmp		r4,#'0'						; unset carry
	
	sub		r1,#1
	cmp		r4,#'0'						; unset carry
	b		fact						; recurse
	
	add		r2,#1						; r2 is the multiplier, it is initialized when in return1 and 
											; incremented before each before each mult call
	cmp		r4,#'0'						; unset carry
	b		mult
	bcs		carrycheck					; keep track if carry is set coming back from mult
	mov		r5,#1
carrycheck
	b		endfact

return1
	mov		r1,#1
	mov		r2,#0						; this will be reached once, when the 0! is called.
	b		endfact							; at this point mult has never been called, initialize r2 for
												; multiplication at this point and increment before mult each time
endfact
	cmp		r5,#1						; if r5 is set, set carry
	
	ldmfd sp!,{r2,r4,r5,r14}				; restore registers
	bx lr


	area	tcddata,data,readwrite
ans1	space	8
ans2	space	8
ans3	space	8
ans4	space 	8

	end